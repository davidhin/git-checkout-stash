#!/bin/bash

# Define a function to save the branch state
save_branch_state() {
  branch_name=$(git symbolic-ref --short HEAD)

  # Save the stash if there are any changes
  if ! git diff-index --quiet HEAD; then
    git stash save -u "branch state for $branch_name"
  fi
}

# Define a function to restore the branch state
restore_branch_state() {
  branch_name=$(git symbolic-ref --short HEAD)

  # Restore the branch state from the stash
  stash_msg="branch state for $branch_name"
  if git stash list | grep -q "$stash_msg\$"; then
    stash_id=$(git stash list --max-count=1 --grep "$stash_msg\$" | cut -d':' -f1)
    git stash apply "$stash_id"
    git stash drop "$stash_id"
  fi
}

is_remote_branch() {
  local branch_name="$1"
  # Replace 'origin' with your remote name if it's different
  if git ls-remote --heads origin | grep -q "refs/heads/$branch_name\$"; then
    return 0 # It's a remote branch
  else
    return 1 # Not a remote branch
  fi
}

# Override the `git` command with a custom implementation
git() {
  case "$1" in
    checkout|co|switch)
      local file_checkout=true
      # Check if any of the arguments is a remote branch. If so, it's not a file checkout.
      for arg in "${@:2}"; do
        if is_remote_branch "$arg"; then
          file_checkout=false
          break
        fi
      done

      if [[ $file_checkout == true ]]; then
        # It's a file checkout, execute the original git command and exit
        command git "$@"
        return
      else
        # Assume it's a branch operation
        save_branch_state
        command git "$@"
        restore_branch_state
      fi
      ;;
    merge)
      restore_branch_state
      command git "$@"
      ;;
    *)
      command git "$@"
      ;;
  esac
}

git "$@"
